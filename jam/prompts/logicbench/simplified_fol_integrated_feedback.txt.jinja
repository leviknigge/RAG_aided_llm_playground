{% extends "qa_prompt.jinja" %}

{%- macro correct_sample(context, query, candidates) -%}
{%- call qa_sample(context,query) -%}
{%- set last = {'predicates': candidates[0].predicates, 'premises':candidates[0].premises, 'conclusion':candidates[0].conclusion} -%}
{%- for draft in candidates -%}
{%- set last = {'predicates': draft.predicates|default(last.predicates), 'premises': draft.predicates|default(last.predicates) , 'conclusion': draft.conclusion|default(last.conclusion)}-%}
Predicates:
{{chat_prompt(end_example)}}{{chat_prompt(seperator)}}{{chat_prompt(start_answer)}}{{last.predicates}}
Premises:
{{last.premises}}
Conclusion:
{{last.conclusion}}{% if not loop.last %}
----
{{chat_prompt(end_answer)}}{{chat_prompt(seperator)}}{{chat_prompt(start_example)}}Error Message:
{{draft.feedback_message}}
{% endif -%}
{%- endfor -%}
{%- endcall -%}
{%- endmacro -%}

{% import 'examples.jinja' as ex %}

{% block task_description -%}
Given a problem description, a question and a draft solution. The task is to parse the problem and the question into first-order logic formulars. Follow exactly the given structure. The draft solution and the identified error of the solution can help with this task. 
The grammar of the first-order logic formular is defined as follows:
1) logical conjunction of expr1 and expr2: expr1 ∧ expr2
2) logical disjunction of expr1 and expr2: expr1 ∨ expr2
3) logical exclusive disjunction of expr1 and expr2: expr1 ⊕ expr2
4) logical negation of expr1: ¬expr1
5) expr1 implies expr2: expr1 → expr2
6) expr1 if and only if expr2: expr1 ↔ expr2
7) logical universal quantification: ∀x
8) logical existential quantification: ∃x
{%- endblock task_description%}

{%- block few_shot_samples -%}
{% for example in ex.examples[:n_samples|default(ex.examples|length)] %}
{{- correct_sample(context=example.context, query=example.query, candidates=example.simplified_fol_iterative) -}}
{{- chat_prompt(seperator) -}}
{% endfor %}
{%- endblock few_shot_samples -%}

{%- block infer_prompt-%}
{{ super() }}
Predicates:
{{chat_prompt(end_example)}}{{chat_prompt(seperator)}}{{chat_prompt(start_answer)}}{{candidate_lf}}
----
{{chat_prompt(end_answer)}}{{chat_prompt(seperator)}}{{chat_prompt(start_example)}}Error Message:
{{feedback_message}}
Predicates:
{{chat_prompt(end_example)}}
{%- endblock infer_prompt -%}