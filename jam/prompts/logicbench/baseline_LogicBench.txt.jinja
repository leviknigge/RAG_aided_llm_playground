{# Redefines all blocks to work with context, but uses same CoT examples #}
{%- extends "qa_prompt.jinja" -%}

{%- macro qa_sample(context, query) -%}
{{chat_prompt(start_example)}}Context: {{context}}
Question: {{query}}
{{caller()}}
----
{{ chat_prompt(end_answer) }}
{%- endmacro -%}

{%- macro baseline_prompt(context, query, cot_steps, target) -%}
{% call qa_sample(context,query) %}
{%- if use_cot -%}
Reasoning steps: {{chat_prompt(end_example)}}{{chat_prompt(seperator)}}{{chat_prompt(start_answer)}}{{cot_steps}}
Answer: {{target}}
{%- else -%}
Answer: {{chat_prompt(end_example)}}{{chat_prompt(seperator)}}{{chat_prompt(start_answer)}}{{target}}
{%- endif -%}
{%- endcall -%}
{%- endmacro -%}

{%- import 'examples.jinja' as ex -%}

{%- block task_description -%}
{%- if use_cot -%}
Given the context and question, think step-by-step logically to answer the question. Answer the question ONLY in ‘yes’ or ‘no’. Please use the below format:
Context: [text with logical rules]
Question: [question based on context]
Reasoning steps: [generate step-by-step
reasoning]
Answer: Yes/No
{%- else -%}
Given the context and question, answer the question. Answer the question ONLY in ‘yes’ or ‘no’. Please use the below format:
Context: [text with logical rules]
Question: [question based on context]
Answer: Yes/No
{%- endif -%}
{%- endblock task_description-%}

{%- block few_shot_samples -%}
{% for example in ex.examples[:n_samples|default(ex.examples|length)] %}
{{- baseline_prompt(context=example.context, query=example.query, cot_steps=example.cot_steps, target=example.target)}}
{{- chat_prompt(seperator) -}}
{% endfor %}
{%- endblock few_shot_samples -%}

{%- block infer_prompt -%}
{{chat_prompt(start_example)}}Context: {{context}}
Question: {{query}}
{%- if use_cot -%}
Reasoning steps: {{chat_prompt(end_example)}}
{%- else -%}
Answer: {{chat_prompt(end_example)}}
{%- endif -%}
{%- endblock infer_prompt -%}